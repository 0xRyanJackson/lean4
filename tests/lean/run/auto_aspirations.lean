-- This is a preliminary list of aspirational goals for the new `auto` tactic.
-- I'm still trying to get a sense of the planned scope;
-- some of these may be quickly ruled out of scope!

macro "auto" : tactic => `(tactic| sorry)

namespace Nat

-- Nat.lt_asymm
example {a b : Nat} (h : a < b) : ¬¨ b < a :=
  Nat.not_lt.2 (Nat.le_of_lt h)
  -- If `Nat.not_lt : ¬¨a < b ‚Üî b ‚â§ a` is a `simp` rule,
  -- and `Nat.le_of_lt : a < b ‚Üí a ‚â§ b` is a `have` rule:
  -- by auto

-- Nat.lt_iff_le_not_le
example {m n : Nat} : m < n ‚Üî m ‚â§ n ‚àß ¬¨ n ‚â§ m :=
  ‚ü®fun h => ‚ü®Nat.le_of_lt h, Nat.not_le_of_gt h‚ü©, fun ‚ü®_, h‚ü© => Nat.lt_of_not_ge h‚ü©
  -- Is proving `‚Üî` via the constructor in scope? I presume so?
  -- If `Nat.not_le_of_gt : a < b ‚Üí ¬¨b ‚â§ a` is an `apply` rule,
  -- and `Nat.not_le` is a `simp` rule:
  -- by auto

-- Nat.ne_iff_lt_or_gt
example {a b : Nat} : a ‚â† b ‚Üî a < b ‚à® b < a :=
  ‚ü®Nat.lt_or_gt_of_ne, fun | .inl h => Nat.ne_of_lt h | .inr h => Nat.ne_of_gt h‚ü©
  -- `Nat.lt_or_gt_of_ne : a ‚â† b ‚Üí a < b ‚à® b < a` would be a `have` rule?
  -- We'll do cases on `Or`
  -- `Nat.ne_of_lt` and `Nat.ne_of_gt` would be `have` rules?

-- A simple logic puzzle: extract a witness from `h‚ÇÇ`, specialize `h‚ÇÅ` at it.
example (b : List Œ±) (p : Œ± ‚Üí Prop) (h‚ÇÅ : ‚àÄ a ‚àà b, p a) (h‚ÇÇ : ‚àÉ a ‚àà b, ¬¨p a) : False :=
  by auto

-- From `Nat.testBit_two_pow_sub_succ`
example (h : x < 2 ^ (n + 1)) :
    decide ((2 ^ (n + 1) - (x + 1)) % 2 = 1) =
      (decide (0 < n + 1) && !decide (x % 2 = 1)) := by
  -- "just logic and omega":
  simp only [zero_lt_succ, decide_True, Bool.true_and]
  rw [‚Üê decide_not, decide_eq_decide]
  omega

-- From `Nat.ne_zero_implies_bit_true`
example {x : Nat}
    {hyp : x > 0 ‚Üí x / 2 ‚â† 0 ‚Üí ‚àÉ i, testBit (x / 2) i = true}
    {xnz : 2 * (x / 2) ‚â† 0}
    {x_pos : x > 0} : ‚àÉ i, testBit x i = true := by
  -- Is this in scope? Much harder. One has to:
  -- * Realise that in `hyp` we could replace `testBit (x / 2) i` with `testBit x (i + 1)`.
  --   (this is the simp lemma `testBit_succ` in the opposite direction)
  -- * Now see that `hyp` could be used to instantiate the existential with `i + 1`.
  -- * After that, deduce `x / 2 ‚â† 0` from `xnz`.
  simp only [ne_eq, Nat.mul_eq_zero, Nat.add_zero, false_or] at xnz
  have ‚ü®d, dif‚ü© := hyp x_pos xnz
  apply Exists.intro (d+1)
  simp_all only [gt_iff_lt, ne_eq, not_false_eq_true, forall_const, testBit_succ]

end Nat

namespace List

-- From `List.mem_filter`
example : x ‚àà filter p as ‚Üî x ‚àà as ‚àß p x := by
  -- Is it even in scope to try induction?
  induction as with
  | nil => simp
  | cons a as ih =>
    /-
    The original proof proceeds here as:
    ```
    by_cases h : p a <;> simp [*, or_and_right]
    ¬∑ exact or_congr_left (and_iff_left_of_imp fun | rfl => h).symm
    ¬∑ exact (or_iff_right fun ‚ü®rfl, h'‚ü© => h h').symm
    ```
    However it is not reasonable to get that one should use `by_cases p a` yet.
    -/
    -- It might be reasonable for `auto` to be aware of `filter_cons`,
    -- even though it is not a simp lemma.
    simp [filter_cons]
    -- Now it is reasonable to split:
    split
    ¬∑ simp [*]
      sorry -- just logic from here
    ¬∑ simp [*]
      sorry -- just slightly trickier logic from here


-- Recall:
-- theorem append_inj :
--     ‚àÄ {s‚ÇÅ s‚ÇÇ t‚ÇÅ t‚ÇÇ : List Œ±}, s‚ÇÅ ++ t‚ÇÅ = s‚ÇÇ ++ t‚ÇÇ ‚Üí length s‚ÇÅ = length s‚ÇÇ ‚Üí s‚ÇÅ = s‚ÇÇ ‚àß t‚ÇÅ = t‚ÇÇ

-- From `List.append_inj'`
example (h : s‚ÇÅ ++ t‚ÇÅ = s‚ÇÇ ++ t‚ÇÇ) (hl : length t‚ÇÅ = length t‚ÇÇ) : s‚ÇÅ = s‚ÇÇ ‚àß t‚ÇÅ = t‚ÇÇ := by
  -- It seems unreasonable for `append_inj` to be a global `apply` rule,
  -- but it could be added locally, or might be reasonable as a `have` rule.
  -- In either case, after using it,
  -- `auto` would need to deduce `s‚ÇÅ.length = s‚ÇÇ.length` from `hl`.
  -- If `auto` can apply `List.length` to `h`, then after simplifying this is just arithmetic.
  auto
  -- Original proof:
  -- append_inj h <| @Nat.add_right_cancel _ (length t‚ÇÅ) _ <| by
  -- let hap := congrArg length h; simp only [length_append, ‚Üê hl] at hap; exact hap

end List

namespace Monoid

class One (Œ± : Type u) where
  one : Œ±

instance (priority := 300) One.toOfNat1 {Œ±} [One Œ±] : OfNat Œ± (nat_lit 1) where
  ofNat := ‚ÄπOne Œ±‚Ä∫.1

class Monoid (Œ≤ : Type) extends One Œ≤, Mul Œ≤ where
  mul_one : ‚àÄ x : Œ≤, x * 1 = x
  one_mul : ‚àÄ x : Œ≤, 1 * x = x
  mul_assoc : ‚àÄ x y z : Œ≤, (x * y) * z = x * (y * z)

open Monoid

variable (p r : Œ± ‚Üí Œ± ‚Üí Prop) (total : ‚àÄ a b, r a b ‚à® r b a) [Monoid Œ≤] (f : Œ± ‚Üí Œ± ‚Üí Œ≤)

theorem multiplicative_of_symmetric_of_total
    (hsymm : ‚àÄ {a b}, p a b ‚Üí p b a) (hf_swap : ‚àÄ {a b}, p a b ‚Üí f a b * f b a = 1)
    (hmul : ‚àÄ {a b c}, r a b ‚Üí r b c ‚Üí p a b ‚Üí p b c ‚Üí p a c ‚Üí f a c = f a b * f b c)
    {a b c : Œ±} (pab : p a b) (pbc : p b c) (pac : p a c) : f a c = f a b * f b c := by
  have hmul' : ‚àÄ {b c}, r b c ‚Üí p a b ‚Üí p b c ‚Üí p a c ‚Üí f a c = f a b * f b c := by
    intros b c rbc pab pbc pac
    obtain rab | rba := total a b
    ¬∑ exact hmul rab rbc pab pbc pac
    obtain rac | rca := total a c
    ¬∑ -- However each of the remaining `rw` seems doable, with congruence closure?
      auto
      -- This one is "hard to see", because we need to expand `1`.
      -- rw [‚Üê one_mul (f a c), ‚Üê hf_swap pab, mul_assoc]
      -- rw [hmul rba rac (hsymm pab) pac pbc]
    ¬∑ auto
      -- rw [‚Üê one_mul (f a c), ‚Üê hf_swap pab, mul_assoc]
      -- rw [hmul rbc rca pbc (hsymm pac) (hsymm pab), mul_assoc, hf_swap (hsymm pac), mul_one]
  obtain rbc | rcb := total b c
  ¬∑ exact hmul' rbc pab pbc pac
  ¬∑ auto
    -- rw [hmul' rcb pac (hsymm pbc) pab, mul_assoc, hf_swap (hsymm pbc), mul_one]

-- From `isPrimePow_iff_pow_succ`
example {p k n : Nat} (h : 0 < k) (w : p ^ k = n) : ‚àÉ l, p ^ (l + 1) = n := by
  -- This feels too hard?
  -- One could notice from `h` that `k = k - 1 + 1`,
  -- and then with this `exact ‚ü®_, w‚ü©` gets you there.
  -- Alternatively, one could `convert ‚ü®_, w‚ü©` and then have a linear arithmetic goal.
  auto

/- What about "arbitrary" algebraic manipulations? -/

class Shelf (Œ± : Type u) where
  act : Œ± ‚Üí Œ± ‚Üí Œ±
  self_distrib : ‚àÄ {x y z : Œ±}, act x (act y z) = act (act x y) (act x z)

class UnitalShelf (Œ± : Type u) extends Shelf Œ±, One Œ± where
  one_act : ‚àÄ a : Œ±, act 1 a = a
  act_one : ‚àÄ a : Œ±, act a 1 = a

infixr:65 " ‚óÉ " => Shelf.act

-- From UnitalShelf.act_act_self_eq
example [UnitalShelf S] (x y : S) : (x ‚óÉ y) ‚óÉ x = x ‚óÉ y := by
  have h : (x ‚óÉ y) ‚óÉ x = (x ‚óÉ y) ‚óÉ (x ‚óÉ 1) := by auto -- rw [UnitalShelf.act_one]
  auto -- rw [h, ‚Üê Shelf.self_distrib, UnitalShelf.act_one]
  -- Or even `auto [(x ‚óÉ y) ‚óÉ x = (x ‚óÉ y) ‚óÉ (x ‚óÉ 1)]`, suggesting that `auto` proves something first, then uses it.

end Monoid

namespace CategoryTheory

universe v u

macro "cat_tac" : tactic => `(tactic| (intros; (try ext); simp))

class Category (obj : Type u) : Type max u (v + 1) where
  Hom : obj ‚Üí obj ‚Üí Type v
  /-- The identity morphism on an object. -/
  id : ‚àÄ X : obj, Hom X X
  /-- Composition of morphisms in a category, written `f ‚â´ g`. -/
  comp : ‚àÄ {X Y Z : obj}, (Hom X Y) ‚Üí (Hom Y Z) ‚Üí (Hom X Z)
  /-- Identity morphisms are left identities for composition. -/
  id_comp : ‚àÄ {X Y : obj} (f : Hom X Y), comp (id X) f = f := by cat_tac
  /-- Identity morphisms are right identities for composition. -/
  comp_id : ‚àÄ {X Y : obj} (f : Hom X Y), comp f (id Y) = f := by cat_tac
  /-- Composition in a category is associative. -/
  assoc : ‚àÄ {W X Y Z : obj} (f : Hom W X) (g : Hom X Y) (h : Hom Y Z), comp (comp f g) h = comp f (comp g h) := by cat_tac

attribute [simp] Category.id_comp Category.comp_id Category.assoc

infixr:10 " ‚ü∂ " => Category.Hom
scoped notation "ùüô" => Category.id  -- type as \b1
scoped infixr:80 " ‚â´ " => Category.comp

structure Functor (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D] : Type max v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ where
  /-- The action of a functor on objects. -/
  obj : C ‚Üí D
  /-- The action of a functor on morphisms. -/
  map : ‚àÄ {X Y : C}, (X ‚ü∂ Y) ‚Üí ((obj X) ‚ü∂ (obj Y))
  /-- A functor preserves identity morphisms. -/
  map_id : ‚àÄ X : C, map (ùüô X) = ùüô (obj X) := by cat_tac
  /-- A functor preserves composition. -/
  map_comp : ‚àÄ {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z), map (f ‚â´ g) = (map f) ‚â´ (map g) := by cat_tac

attribute [simp] Functor.map_id Functor.map_comp

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E]
variable {F G : Functor C D}

namespace Functor

def comp (F : Functor C D) (G : Functor D E) : Functor C E where
  obj X := G.obj (F.obj X)
  map f := G.map (F.map f)
  -- Note `map_id` and `map_comp` are handled by `cat_tac`.

variable {G : Functor D E}

@[simp] theorem comp_obj : (F.comp G).obj X = G.obj (F.obj X) := rfl
@[simp] theorem comp_map (f : X ‚ü∂ Y) : (F.comp G).map f = G.map (F.map f) := rfl

end Functor

@[ext]
structure NatTrans [Category.{v‚ÇÅ, u‚ÇÅ} C] [Category.{v‚ÇÇ, u‚ÇÇ} D] (F G : Functor C D) : Type max u‚ÇÅ v‚ÇÇ where
  /-- The component of a natural transformation. -/
  app : ‚àÄ X : C, F.obj X ‚ü∂ G.obj X
  /-- The naturality square for a given morphism. -/
  naturality : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y), F.map f ‚â´ app Y = app X ‚â´ G.map f := by cat_tac

attribute [simp] NatTrans.naturality

namespace NatTrans

protected def id (F : Functor C D) : NatTrans F F where app X := ùüô (F.obj X)

@[simp] theorem id_app : (NatTrans.id F).app X = ùüô (F.obj X) := rfl

protected def vcomp (Œ± : NatTrans F G) (Œ≤ : NatTrans G H) : NatTrans F H where
  app X := Œ±.app X ‚â´ Œ≤.app X
  naturality := by
    intros X Y f
    dsimp
    -- This is the first place where `cat_tac` lets us down, and ematching should save us.
    -- We can't rewrite by `Œ±.naturality f` immediately, because the composition is associated incorrectly.
    rw [‚Üê Category.assoc]
    rw [Œ±.naturality f]
    rw [Category.assoc]
    rw [Œ≤.naturality f]
    rw [‚Üê Category.assoc]
    -- (Mathlib gets around this with a `@[reassoc]` attribute,
    -- that automatically generates copies of lemmas that fold in associativity.
    -- It can only ever get you "one step", however.)
    -- (Note that the ematching in Lean 3 couldn't quite do this one:
    -- just because there was a bug when we have two typeclass instances with different parameters,
    -- e.g. the two category instances here.)

@[simp] theorem vcomp_app (Œ± : NatTrans F G) (Œ≤ : NatTrans G H) (X : C) :
    (Œ±.vcomp Œ≤).app X = Œ±.app X ‚â´ Œ≤.app X := rfl

end NatTrans

instance Functor.category : Category.{max u‚ÇÅ v‚ÇÇ} (Functor C D) where
  Hom F G := NatTrans F G
  id F := NatTrans.id F
  comp Œ± Œ≤ := NatTrans.vcomp Œ± Œ≤
  -- Here we're okay: all the proofs are handled by `cat_tac`.

@[simp]
theorem id_app (F : Functor C D) (X : C) : (ùüô F : F ‚ü∂ F).app X = ùüô (F.obj X) := rfl

@[simp]
theorem comp_app {F G H : Functor C D} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) (X : C) :
    (Œ± ‚â´ Œ≤).app X = Œ±.app X ‚â´ Œ≤.app X := rfl

theorem app_naturality {F G : Functor C (Functor D E)} (T : F ‚ü∂ G) (X : C) {Y Z : D} (f : Y ‚ü∂ Z) :
    (F.obj X).map f ‚â´ (T.app X).app Z = (T.app X).app Y ‚â´ (G.obj X).map f := by
  cat_tac

theorem naturality_app {F G : Functor C (Functor D E)} (T : F ‚ü∂ G) (Z : D) {X Y : C} (f : X ‚ü∂ Y) :
    (F.map f).app Z ‚â´ (T.app Y).app Z = (T.app X).app Z ‚â´ (G.map f).app Z := by
  -- `simp` can't get us there, as one has to go uphill first.
  rw [‚Üê comp_app]
  rw [T.naturality f]
  rw [comp_app]

open Category Functor NatTrans

def hcomp {H I : Functor D E} (Œ± : F ‚ü∂ G) (Œ≤ : H ‚ü∂ I) : F.comp H ‚ü∂ G.comp I where
  app := fun X : C => Œ≤.app (F.obj X) ‚â´ I.map (Œ±.app X)
  naturality X Y f := by
    -- Is this in range for ematching?
    rw [Functor.comp_map, Functor.comp_map, ‚Üê assoc, naturality, assoc, ‚Üê I.map_comp, naturality,
      map_comp, assoc]

end CategoryTheory
