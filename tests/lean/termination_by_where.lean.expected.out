termination_by_where.lean:34:29-34:41: error: fail to show termination for
  Ex000_0.foo
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo (dec1 n)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
n : Nat
⊢ dec1 n < n
termination_by_where.lean:46:0-49:29: error: well-founded recursion cannot be used, 'Ex000_2.foo.bar' does not take any (non-fixed) arguments
termination_by_where.lean:46:29-46:41: error: fail to show termination for
  Ex000_2.foo
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo (dec1 n)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
n : Nat
⊢ dec1 n < n
termination_by_where.lean:65:25-65:37: error: fail to show termination for
  Ex00200.foo.bar
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo.bar (dec2 m)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
m : Nat
⊢ dec2 m < m
termination_by_where.lean:66:14-66:27: error: tactic 'apply' failed, failed to unify
  dec2 ?n < ?n
with
  (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
n : Nat
⊢ (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
termination_by_where.lean:67:0-67:13: error: unexpected token 'decreasing_by'; expected command
termination_by_where.lean:72:25-72:37: error: fail to show termination for
  Ex0020_.foo.bar
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo.bar (dec2 m)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
m : Nat
⊢ dec2 m < m
termination_by_where.lean:83:25-83:37: error: fail to show termination for
  Ex00202.foo.bar
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo.bar (dec2 m)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
m : Nat
⊢ dec2 m < m
termination_by_where.lean:84:14-84:27: error: tactic 'apply' failed, failed to unify
  dec2 ?n < ?n
with
  (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
n : Nat
⊢ (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
termination_by_where.lean:85:2-85:15: error: unexpected token 'decreasing_by'; expected command
termination_by_where.lean:88:0-91:29: error: well-founded recursion cannot be used, 'Ex002_2.foo.bar' does not take any (non-fixed) arguments
termination_by_where.lean:88:29-88:41: error: fail to show termination for
  Ex002_2.foo
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo (dec1 n)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
n : Nat
⊢ dec1 n < n
termination_by_where.lean:118:25-118:37: error: fail to show termination for
  Ex02200.foo.bar
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo.bar (dec2 m)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
m : Nat
⊢ dec2 m < m
termination_by_where.lean:119:14-119:27: error: tactic 'apply' failed, failed to unify
  dec2 ?n < ?n
with
  (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
n : Nat
⊢ (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
termination_by_where.lean:120:0-120:13: error: unexpected token 'decreasing_by'; expected command
termination_by_where.lean:125:25-125:37: error: fail to show termination for
  Ex0220_.foo.bar
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo.bar (dec2 m)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
m : Nat
⊢ dec2 m < m
termination_by_where.lean:136:25-136:37: error: fail to show termination for
  Ex02202.foo.bar
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo.bar (dec2 m)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
m : Nat
⊢ dec2 m < m
termination_by_where.lean:137:14-137:27: error: tactic 'apply' failed, failed to unify
  dec2 ?n < ?n
with
  (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
n : Nat
⊢ (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
termination_by_where.lean:138:2-138:15: error: unexpected token 'decreasing_by'; expected command
termination_by_where.lean:141:0-144:29: error: well-founded recursion cannot be used, 'Ex022_2.foo.bar' does not take any (non-fixed) arguments
termination_by_where.lean:141:29-141:41: error: fail to show termination for
  Ex022_2.foo
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo (dec1 n)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
n : Nat
⊢ dec1 n < n
termination_by_where.lean:171:27-171:39: error: fail to show termination for
  Ex02400.foo.bar
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo.bar (dec2 m)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
m : Nat
⊢ dec2 m < m
termination_by_where.lean:172:14-172:27: error: tactic 'apply' failed, failed to unify
  dec2 ?n < ?n
with
  (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
n : Nat
⊢ (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
termination_by_where.lean:173:0-173:13: error: unexpected token 'decreasing_by'; expected command
termination_by_where.lean:178:27-178:39: error: fail to show termination for
  Ex0240_.foo.bar
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo.bar (dec2 m)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
m : Nat
⊢ dec2 m < m
termination_by_where.lean:189:27-189:39: error: fail to show termination for
  Ex02402.foo.bar
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo.bar (dec2 m)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
m : Nat
⊢ dec2 m < m
termination_by_where.lean:190:14-190:27: error: tactic 'apply' failed, failed to unify
  dec2 ?n < ?n
with
  (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
n : Nat
⊢ (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
termination_by_where.lean:191:2-191:15: error: unexpected token 'decreasing_by'; expected command
termination_by_where.lean:196:4-196:7: error: fail to show termination for
  Ex024_2.foo.bar
with errors
structural recursion cannot be used

well-founded recursion cannot be used, 'Ex024_2.foo.bar' does not take any (non-fixed) arguments
termination_by_where.lean:202:27-202:39: error: fail to show termination for
  Ex02420.foo.bar
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo.bar (dec2 m)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
m : Nat
⊢ dec2 m < m
termination_by_where.lean:203:16-203:29: error: tactic 'apply' failed, failed to unify
  dec2 ?n < ?n
with
  (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
n : Nat
⊢ (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
termination_by_where.lean:204:0-204:13: error: unexpected token 'decreasing_by'; expected command
termination_by_where.lean:215:27-215:39: error: fail to show termination for
  Ex0242_.foo.bar
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo.bar (dec2 m)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
m : Nat
⊢ dec2 m < m
termination_by_where.lean:225:29-225:41: error: fail to show termination for
  Ex00h00.foo.bar
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo.bar (dec2 m)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
m : Nat
⊢ dec2 m < m
termination_by_where.lean:226:14-226:27: error: tactic 'apply' failed, failed to unify
  dec2 ?n < ?n
with
  (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
n : Nat
⊢ (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
termination_by_where.lean:227:0-227:13: error: unexpected token 'decreasing_by'; expected command
termination_by_where.lean:231:29-231:41: error: fail to show termination for
  Ex00h0_.foo.bar
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo.bar (dec2 m)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
m : Nat
⊢ dec2 m < m
termination_by_where.lean:240:29-240:41: error: fail to show termination for
  Ex00h02.foo.bar
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo.bar (dec2 m)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
m : Nat
⊢ dec2 m < m
termination_by_where.lean:241:14-241:27: error: tactic 'apply' failed, failed to unify
  dec2 ?n < ?n
with
  (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
n : Nat
⊢ (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
termination_by_where.lean:242:2-242:15: error: unexpected token 'decreasing_by'; expected command
termination_by_where.lean:246:6-246:9: error: fail to show termination for
  Ex00h_2.foo.bar
with errors
structural recursion cannot be used

well-founded recursion cannot be used, 'Ex00h_2.foo.bar' does not take any (non-fixed) arguments
termination_by_where.lean:251:29-251:41: error: fail to show termination for
  Ex00h20.foo.bar
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo.bar (dec2 m)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
m : Nat
⊢ dec2 m < m
termination_by_where.lean:252:16-252:29: error: tactic 'apply' failed, failed to unify
  dec2 ?n < ?n
with
  (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
n : Nat
⊢ (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
termination_by_where.lean:253:0-253:13: error: unexpected token 'decreasing_by'; expected command
termination_by_where.lean:256:29-256:41: error: fail to show termination for
  Ex00h40.foo.bar
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo.bar (dec2 m)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
m : Nat
⊢ dec2 m < m
termination_by_where.lean:257:18-257:31: error: tactic 'apply' failed, failed to unify
  dec2 ?n < ?n
with
  (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
n : Nat
⊢ (invImage (fun a => sizeOf a) instWellFoundedRelation).1 (dec1 n) n
termination_by_where.lean:258:0-258:13: error: unexpected token 'decreasing_by'; expected command
termination_by_where.lean:272:29-272:41: error: fail to show termination for
  Ex00h2_.foo.bar
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo.bar (dec2 m)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
m : Nat
⊢ dec2 m < m
termination_by_where.lean:277:29-277:41: error: fail to show termination for
  Ex00h4_.foo.bar
with errors
argument #1 was not used for structural recursion
  failed to eliminate recursive application
    foo.bar (dec2 m)

structural recursion cannot be used

failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
m : Nat
⊢ dec2 m < m
